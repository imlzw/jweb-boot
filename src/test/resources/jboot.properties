#--------undertow 配置 start--------
# 热部署支持：
#   true：支持热部署，目前不完善，会丢失内存对象信息，建议false。
#   false：不支持热部署，但还是可以通过debug实现局部代码热加载。
undertow.devMode=false 
undertow.port=80
#配置host为通用的地址，默认为localhost, 如未配置，在启用服务发现时，会造成nacos无法主动探测到该服务而导致实例不健康的问题
undertow.host=0.0.0.0 
#配置webapp资源目录，默认为 src/main/webapp,webapp,classpath:webapp
#undertow.resourcePath=src/main/webapp
#undertow.hotSwapClassPrefix=org.apache.shiro.,cn.imlzw.,com.ndasec.,cc.jweb.
#--------undertow 配置 end--------






#--------jboot 杂项配置区 start--------
#应用模式设置: dev:开发模式,product:生产模式
jboot.app.mode=dev 
jboot.app.jfinalConfig = cc.jweb.boot.core.JwebCoreConfig
# json配置
jboot.json.camelCaseJsonStyleEnable=false
jboot.json.skipNullValueField=true
jboot.json.timestampPattern=yyyy-MM-dd HH:mm:ss
#websocket配置,多个 endpoint 用英文逗号（,） 隔开。
#jboot.web.webSocketEndpoint=com.ndasec.jweb.web.websocket.controller.WebSocketController
#--------jboot 杂项配置区 end--------






#--------jboot 数据库配置 start--------
jboot.datasource.type=mysql
jboot.datasource.url=jdbc:mysql://127.0.0.1:3306/web_base?characterEncoding=utf8&useSSL=true
jboot.datasource.user=root
jboot.datasource.password=root
#--------jboot 数据库配置 end--------






#--------jboot shiro 配置区 start--------
# shiro配置文件，一旦配置如下参数，即启用shiro功能
#jboot.shiro.ini=shiro.ini
# shiro过滤器路径映射
#jboot.shiro.urlMapping=/*
#--------jboot shiro 配置区 end--------






#--------jboot RPC配置 start--------
#RPC类型：dubbo...?
jboot.rpc.type = dubbo
#dubbo 的通信协议配置
jboot.rpc.dubbo.registry.address = nacos://127.0.0.1:8848
jboot.rpc.dubbo.protocol.name = dubbo
jboot.rpc.dubbo.protocol.port = 0
#--------jboot RPC配置 end--------






#--------jboot nacos 分布式配置中心 start--------
jboot.config.nacos.enable = true
jboot.config.nacos.serverAddr = 127.0.0.1:8848
jboot.config.nacos.dataId = user
jboot.config.nacos.group = dev
#--------jboot nacos 分布式配置中心 end--------






#--------jweb 服务发现配置 start--------
#服务发现开启
jweb.discovery.enable=true
#服务名称，服务关键字，后继调用服务dns名（必填）
jweb.discovery.serviceName=webgw
#注册中心地址
jweb.discovery.registerAddress=http://192.168.2.202:8848
#命名空间，默认值：public（可选）
#jweb.discovery.namespace=public
#分组名称，默认值：DEFAULT_GROUP（可选）
#jweb.discovery.groupName=dev
#所属集群名称配置，默认值：DEFAULT（可选）
#jweb.discovery.clusterName=TEST
#是否为临时节点实例，默认：true。 true: 临时节点实现；false:为持久化实例；（可选）
#若为临时节点实例，客户端会主动产生上报心跳，来维护节点健康状况
#若为持久化实例，nacos服务器会主动检测服务健康状况，根据集群配置相应检测类型：TCP,HTTP,NONE
jweb.discovery.ephemeral=false
#优先使用的注册的ip段。在一台服务器有多个网卡ip时，优先使用以下ip段（可选）
jweb.discovery.preferredNetworks=192.168,10.0
#忽略指定关键字的网卡。在一台服务器有多个网卡ip时，忽略包含以下关键字的网卡名（可选）
#jweb.discovery.ignoredInterfaces=virtual,docker0,veth,hyper-v,vmware,vmnet,tap,docker,flannel,cni
#--------jweb 服务发现配置 end--------






#--------jweb 网关路由配置 start--------
# 需要配合配置 ---jweb 服务发现配置---
# path 匹配示例
jweb.gateway.adai.enable = true
jweb.gateway.adai.name = jweb-adai
jweb.gateway.adai.uri = http://192.168.2.202:80
jweb.gateway.adai.pathStartsWith = /adai/
# 路径重写，格式：【正则匹配】,【替换字符】。
# 目前简单使用java的，String.replaceAll来替换重写
jweb.gateway.adai.pathRewrite = /adai/,/
# 上下文路径配置
# 该配置将以Header值的形式传递给被代理的目标，
# 具体返回的html页面中的引用资源路径，需要开发者自动添加contextPath前缀，以适应网关再次过滤代理
jweb.gateway.adai.contextPath = /adai/

# host 匹配示例。
jweb.gateway.adai2.enable = true
jweb.gateway.adai2.name = jweb-adai2
# 网关路由目标地址
# 支持{target.jweb.discovery.serviceName}的配置，动态选择健康的服务路由
jweb.gateway.adai2.uri = http://{adai}
jweb.gateway.adai2.hostStartsWith = adai.
#
# PS
# - 针对网关代理，在压力测试时，发现存在大量的TIME_OUT状态连接，占用系统连接
# 可以参考链接优化linux系统：https://www.cnblogs.com/dadonggg/p/8778318.html
# - 在压测过程中，如果网关代理了自己，在 ab -c 1000 -n 10000 后直接卡信，jweb后台日志输出socket Read timeout。
# 原因未知，猜测可能是压测并发太大，占满链接数，导致代理的请求无法处理，请注意下。
#
# LINUX下压测代理性能说明:
# 环境：两台服务器4cpu(i5-4590 3.30GHz)16G Centos 7。GW与SERVICE
# 命令：ab -c 1000 -n 10000  GW.targetUrl
# 接口：仅输出32个字符，无其它代码逻辑
# 结果：14000+- tps（GW -> SERVICE)
#
#-------jweb 网关路由配置 end--------



