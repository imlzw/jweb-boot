#
# Copyright  (c) 2020-2021 imlzw@vip.qq.com jweb.cc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#服务名配置
jweb.serviceName=demo



#--------undertow 配置 start--------
# 热部署支持：
#   true：支持热部署，目前不完善，会丢失内存对象信息，建议false。
#   false：不支持热部署，但还是可以通过debug实现局部代码热加载。
undertow.devMode=false 
undertow.port=80
#配置host为通用的地址，默认为localhost, 如未配置，在启用服务发现时，会造成nacos无法主动探测到该服务而导致实例不健康的问题
undertow.host=0.0.0.0 
#配置webapp资源目录，默认为 src/main/webapp,webapp,classpath:webapp
#undertow.resourcePath=src/main/webapp
#undertow.hotSwapClassPrefix=org.apache.shiro.,cn.imlzw.,com.ndasec.,cc.jweb.
#--------undertow 配置 end--------






#--------jboot 杂项配置区 start--------
#应用模式设置: dev:开发模式,product:生产模式
jboot.app.mode=dev 
jboot.app.jfinalConfig = cc.jweb.boot.core.JwebCoreConfig
# json配置
jboot.json.camelCaseJsonStyleEnable=false
jboot.json.skipNullValueField=true
jboot.json.timestampPattern=yyyy-MM-dd HH:mm:ss
#websocket配置,多个 endpoint 用英文逗号（,） 隔开。
#jboot.web.webSocketEndpoint=com.ndasec.jweb.web.websocket.controller.WebSocketController
#--------jboot 杂项配置区 end--------






#--------jboot 数据库配置 start--------
jboot.datasource.type=mysql
jboot.datasource.url=jdbc:mysql://127.0.0.1:3306/web_base?characterEncoding=utf8&useSSL=true
jboot.datasource.user=root
jboot.datasource.password=root
#--------jboot 数据库配置 end--------


#--------jboot jwt配置 start--------
#配置JWT的密钥，当使用@EnableJwt时，必须配置，否则 jboot 会给出警告，密钥用base64编码
jboot.web.jwt.secret=MTIz
#--------jboot jwt配置 end--------




#--------jweb 安全模块配置 start--------
# 安全模块总开关，默认false
jweb.security.enable=true
# session超时时长（秒），默认30*60秒，即30分钟
jweb.security.sessionTimeout=10
# session类型：DEFAULT：http session,JWT:json web token session。{className}:自定义session实现类名
jweb.security.sessionType=JWT
# 可以直接写实现类
# jweb.security.sessionType=cc.jweb.boot.security.session.impl.JwebHttpSession

# jwt token 生成密钥,必填
jweb.security.jwt.secret=MTIz
# jwt token 存储keyName，默认为jwt
jweb.security.jwt.storeKey=jwtt
# jwt token 存储位置，可选：HEADER,COOKIE, 默认为cookie
jweb.security.jwt.storePosition=COOKIE


# jweb 登录模块配置 start--------
# 是否启用,默认false
jweb.security.authc.enable=true
# 配置未认证时，自动跳转登录地址，该地址不会被安全框架拦截。（注：一般也是登录表单提交的地址）。
jweb.security.authc.loginUrl=/login
# 需要认证登录的地址列表，多个地址用,隔开,采用AntPathMatch路径匹配规则
# Apache Ant样式的路径有三种通配符匹配方法。
#
#    ‘?’  匹配任何单字符
#    ‘*’  匹配0或者任意数量的字符
#    ‘**’ 匹配0或者更多的目录
#    /app/*.x      匹配(Matches)所有在app路径下的.x文件
#    /app/p?ttern  匹配(Matches) /app/pattern 和 /app/pXttern,但是不包括/app/pttern
#    /**/example   匹配(Matches) /app/example, /app/foo/example, 和 /example
#    /app/**/dir/file.  匹配(Matches) /app/dir/file.jsp, /app/foo/dir/file.html, /app/foo/bar/dir/file.pdf
#    /**/*.jsp     匹配(Matches)任何的.jsp 文件
jweb.security.authc.filtePaths=/**
# 排除不需要认证的地址列表，多个地址用隔开，采用AntPathMatch路径匹配规则
jweb.security.authc.excludePaths=/assets/**,/vcode,/401,/403,/file/**,/portal/**
# jweb 登录模块配置 end--------

# jweb 权限鉴权模块配置 start--------
# 是否启用,必填
jweb.security.perms.enable=true
jweb.security.perms.failureUrl=/403
#jweb.security.perms.filtePaths=/**,/admin/**,/
# jweb 登录模块配置 end--------

#--------jweb 安全模块配置 end--------





#--------jboot shiro 配置区 start--------
# shiro配置文件，一旦配置如下参数，即启用shiro功能
#jboot.shiro.ini=shiro.ini
# shiro过滤器路径映射
#jboot.shiro.urlMapping=/*
#--------jboot shiro 配置区 end--------






#--------jboot RPC配置 start--------
#RPC类型：dubbo...?
jboot.rpc.type = dubbo
#dubbo 的通信协议配置
jboot.rpc.dubbo.registry.address = nacos://127.0.0.1:8848
jboot.rpc.dubbo.protocol.name = dubbo
jboot.rpc.dubbo.protocol.port = 0
#--------jboot RPC配置 end--------






#--------jboot nacos 分布式配置中心 start--------
jboot.config.nacos.enable = true
jboot.config.nacos.serverAddr = 127.0.0.1:8848
jboot.config.nacos.dataId = user
jboot.config.nacos.group = dev
#--------jboot nacos 分布式配置中心 end--------






#--------jweb 服务发现配置 start--------
#服务发现开启
jweb.discovery.enable=false
#服务名称，服务关键字，后继调用服务dns名（必填）
jweb.discovery.serviceName=${jweb.serviceName}
#注册中心地址
jweb.discovery.registerAddress=http://192.168.2.202:8848
#命名空间，默认值：public（可选）
#jweb.discovery.namespace=public
#分组名称，默认值：DEFAULT_GROUP（可选）
#jweb.discovery.groupName=dev
#所属集群名称配置，默认值：DEFAULT（可选）
#jweb.discovery.clusterName=TEST
#是否为临时节点实例，默认：true。 true: 临时节点实现；false:为持久化实例；（可选）
#若为临时节点实例，客户端会主动产生上报心跳，来维护节点健康状况
#若为持久化实例，nacos服务器会主动检测服务健康状况，根据集群配置相应检测类型：TCP,HTTP,NONE
jweb.discovery.ephemeral=false
#优先使用的注册的ip段。在一台服务器有多个网卡ip时，优先使用以下ip段（可选）
jweb.discovery.preferredNetworks=192.168.2,10.0
#忽略指定关键字的网卡。在一台服务器有多个网卡ip时，忽略包含以下关键字的网卡名（统一转小写）（可选）
#jweb.discovery.ignoredInterfaces=virtual,docker0,veth,hyper-v,vmware,vmnet,tap,docker,flannel,cni
#--------jweb 服务发现配置 end--------






#--------jweb 网关路由配置 start--------
# 需要配合配置 ---jweb 服务发现配置---
# 熔断限流支持需要配置 ---jweb 熔断限流sentinel配置---
# path 匹配示例
jweb.gateway.adai.enable = true
jweb.gateway.adai.name = jweb-adai
jweb.gateway.adai.uri = http://192.168.2.202:80
jweb.gateway.adai.pathStartsWith = /adai/
# 路径重写，格式：【正则匹配】,【替换字符】。
# 目前简单使用java的，String.replaceAll来替换重写
jweb.gateway.adai.pathRewrite = /adai/,/
# 上下文路径配置
# 该配置将以Header值的形式传递给被代理的目标，
# 具体返回的html页面中的引用资源路径，需要开发者自动添加contextPath前缀，以适应网关再次过滤代理
jweb.gateway.adai.contextPath = /adai/
# 是否启用网关代理限流熔断
jweb.gateway.adai.sentinelEnable = true
# 被限流后跳转页面地址
#jweb.gateway.adai.sentinelBlockPage = /block
# 被限流后显示的json内容，如果有配置 sentinelBlockPage，则 sentinelBlockJsonMap 配置无效
#jweb.gateway.adai.sentinelBlockJsonMap ={"block":true}


# host 匹配示例。
jweb.gateway.adai2.enable = true
jweb.gateway.adai2.name = jweb-adai2
# 网关路由目标地址
# 支持{target.jweb.discovery.serviceName}的配置，动态选择健康的服务路由
jweb.gateway.adai2.uri = http://{adai}
jweb.gateway.adai2.hostStartsWith = adai.
# 是否启用网关代理限流熔断
jweb.gateway.adai2.sentinelEnable = true
# 被限流后跳转页面地址
#jweb.gateway.adai2.sentinelBlockPage = /block
# 被限流后显示的json内容，如果有配置 sentinelBlockPage，则 sentinelBlockJsonMap 配置无效
#jweb.gateway.adai2.sentinelBlockJsonMap ={"block":true}


# host 匹配示例。
jweb.gateway.adai3.enable = true
jweb.gateway.adai3.name = jweb-adai3
# 网关路由目标地址
# 支持{target.jweb.discovery.serviceName}的配置，动态选择健康的服务路由
jweb.gateway.adai3.uri = http://{adai}
jweb.gateway.adai3.hostStartsWith = adai3.
# 是否启用网关代理限流熔断
jweb.gateway.adai3.sentinelEnable = true
# 被限流后跳转页面地址
#jweb.gateway.adai3.sentinelBlockPage = /block
# 被限流后显示的json内容，如果有配置 sentinelBlockPage，则 sentinelBlockJsonMap 配置无效
#jweb.gateway.adai3.sentinelBlockJsonMap ={"block":true}

# 由于采用sun的HttpURLConnection连接代理，所以HOST头信息传递被限制了，影响服务重定向等
# 可以在启动时添加系统变量属性sun.net.http.allowRestrictedHeaders = true
# -Dsun.net.http.allowRestrictedHeaders = true

# PS
# - 针对网关代理，在压力测试时，发现存在大量的TIME_OUT状态连接，占用系统连接
# 可以参考链接优化linux系统：https://www.cnblogs.com/dadonggg/p/8778318.html
# - 在压测过程中，如果网关代理了自己，在 ab -c 1000 -n 10000 后直接卡信，jweb后台日志输出socket Read timeout。
# 原因未知，猜测可能是压测并发太大，占满链接数，导致代理的请求无法处理，请注意下。
#
# LINUX下压测代理性能说明:
# 环境：两台服务器4cpu(i5-4590 3.30GHz)16G Centos 7。GW与SERVICE
# 命令：ab -c 1000 -n 10000  GW.targetUrl
# 接口：仅输出32个字符，无其它代码逻辑
# 结果：14000+- tps（GW -> SERVICE)
#
#--------jweb 网关路由配置 end--------






#-------- sentinel.properties 熔断限流配置 start--------
# 原配置文件为 classpath:sentinel.properties，这里启动统一重定向到jboot.properties
# 注意:该配置从sentinel.properties转移到这里，所有不支持jboot的${key}值替换
# 指定项目名称,String	null，非必需，
project.name=demo
# 指定应用的类型	int	0 (APP_TYPE_COMMON)	否	1.6.0 引入
# csp.sentinel.app.type
# 单个监控日志文件的大小	long	52428800 (50MB)	否
# csp.sentinel.metric.file.single.size
# 监控日志文件的总数上限	int	6	否
# csp.sentinel.metric.file.total.count
# 最大的有效响应时长（ms），超出此值则按照此值记录	int	4900	否	1.4.1 引入
# csp.sentinel.statistic.max.rt
# SPI 加载时使用的 ClassLoader，默认为给定类的 ClassLoader	String	default	否	若配置 context 则使用 thread context ClassLoader。1.7.0 引入
# csp.sentinel.spi.classloader
csp.sentinel.dashboard.server=localhost:8080
# 心跳包发送周期，单位毫秒 long,默认 null，非必需，若不进行配置，则会从相应的 HeartbeatSender 中提取默认值
# csp.sentinel.heartbeat.interval.ms=
# 本地启动 HTTP API Server 的端口号，int，默认值：8719，非必需，若端口冲突会自动向下探测可用的端口。
csp.sentinel.api.port=8720
# 指定心跳包中本机的 IP,String	- 默认值：空， 若不指定则通过 HostNameUtil 解析；该配置项多用于多网卡环境
# csp.sentinel.heartbeat.client.ip=
# 指定心跳包中本机IP获取时忽略的网口关键字(忽略大小写)
csp.sentinel.heartbeat.client.net.ignoredInterfaces=veth,docker,virtual
# 指定心跳包中本机IP获取时优先网段配置
csp.sentinel.heartbeat.client.net.preferredNetworks=192.168.2,192.168,172.27
#-------- sentinel.properties 熔断限流配置 end--------



#--------jboot 限流配置 start--------
jboot.sentinel.enable = true
jboot.sentinel.reqeustEnable = true
jboot.sentinel.datasource = nacos
jboot.sentinel.datasource.nacos.serverAddress=http://localhost:8848
jboot.sentinel.datasource.nacos.groupId=SENTINEL_GROUP
jboot.sentinel.datasource.nacos.dataId=${jweb.serviceName}-flow-rules
#--------jboot 限流配置 end--------


